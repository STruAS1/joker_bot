package start

import (
	"SHUTKANULbot/Utilities"
	contextBot "SHUTKANULbot/bot/context"
	"context"
	"fmt"
	"math/rand"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func Handle(botCtx *contextBot.BotContext) {
	state := contextBot.GetUserState(botCtx)
	switch state.Level {
	case 1:
		HandleLVL1(botCtx)
	case 2:
		handleLvl2(botCtx)
	case 3:
		handleLvl3(botCtx)
	case 4:
		handleLvl4(botCtx)
	case 5:
		handleLvl5(botCtx)
	}

}

func HandleLVL1(botCtx *contextBot.BotContext) {
	if botCtx.CallbackQuery != nil {
		switch botCtx.CallbackQuery.Data {
		case "Docs":
			HandleDocs(botCtx)
		default:
			state := contextBot.GetUserState(botCtx)
			delete(state.Data, "DocsActiveStep")
			DeleteMessageConfig := tgbotapi.DeleteMessageConfig{
				ChatID:    botCtx.UserID,
				MessageID: state.MessageID,
			}
			botCtx.Ctx.BotAPI.Send(DeleteMessageConfig)
			state.MessageID = 0
			HandleStartCommand(botCtx)
		}
	}
}

func handleLvl2(botCtx *contextBot.BotContext) {

	state := contextBot.GetUserState(botCtx)
	if botCtx.CallbackQuery != nil {
		switch botCtx.CallbackQuery.Data {
		case "back":
			cancel, exist := state.Data["ChancelTransaction"].(context.CancelFunc)
			if exist {
				cancel()
				state.Data["SendErr"] = false
				delete(state.Data, "ChancelTransaction")
			}
			delete(state.Data, "WithdrawActiveStep")
			HandleSettings(botCtx)
		default:
			HandleWithdraw(botCtx)
		}
	} else if botCtx.Message != nil {
		HandleWithdraw(botCtx)
	}
}

func handleLvl4(botCtx *contextBot.BotContext) {
	state := contextBot.GetUserState(botCtx)
	if botCtx.CallbackQuery != nil {
		switch botCtx.CallbackQuery.Data {
		case "back":
			delete(state.Data, "SetAuthorData")
			HandleSettings(botCtx)
		default:
			HandleSetAuthor(botCtx)
		}
	} else if botCtx.Message != nil {
		HandleSetAuthor(botCtx)
	}
}

func handleLvl3(botCtx *contextBot.BotContext) {
	state := contextBot.GetUserState(botCtx)
	if botCtx.CallbackQuery != nil {
		switch botCtx.CallbackQuery.Data {
		case "back":
			cancel, exist := state.Data["ChancelConnect"].(context.CancelFunc)
			if exist {
				cancel()
				state.Data["SendErr"] = false
				delete(state.Data, "ChancelConnect")
			}
			deleteCfg := tgbotapi.DeleteMessageConfig{
				ChatID:    botCtx.UserID,
				MessageID: state.MessageID,
			}
			state.MessageID = 0
			botCtx.Ctx.BotAPI.Send(deleteCfg)
			HandleSettings(botCtx)
		}
	}
}

func handleLvl5(botCtx *contextBot.BotContext) {
	if botCtx.CallbackQuery != nil {
		data := strings.Split(botCtx.CallbackQuery.Data, "_")
		switch data[0] {
		case "Evolution":
			if len(data) == 4 {
				jokeId, _ := strconv.ParseUint(data[2], 10, 0)
				evaluation, _ := strconv.ParseUint(data[1], 10, 0)
				Utilities.AddJokeEvaluation(botCtx.UserID, uint(jokeId), uint(evaluation))
				alert := tgbotapi.NewCallbackWithAlert(botCtx.CallbackQuery.ID, rateMessages[evaluation][rand.Intn(len(rateMessages[evaluation]))])
				alert.ShowAlert = false
				botCtx.Ctx.BotAPI.Request(alert)
				fmt.Print(data[3])
				if data[3] == "true" {
					HandleDocs(botCtx)
				} else {
					HandleStartCommand(botCtx)
				}
			}
		}
	}
}

var rateMessages = map[uint64][]string{
	1: {
		"–ù—É –∏ –∫—Ä–∏–Ω–∂‚Ä¶",
		"üëé –≠—Ç–æ –±—ã–ª–æ –±–æ–ª—å–Ω–æ.",
		"–®—É—Ç–∫–∞ —Ö—É–∂–µ, —á–µ–º —Ç–≤–æ–π –±–∞—Ç—è —É—à—ë–ª –∑–∞ —Ö–ª–µ–±–æ–º.",
		"–ú–∏–Ω—É—Å —É—à–∏, –º–∏–Ω—É—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.",
		"–≠—Ç–æ —Ç–æ—á–Ω–æ –Ω–µ —Å–º–µ—à–Ω–æ.",
		"–°–ª–∞–±–æ–≤–∞—Ç–æ‚Ä¶",
		"–®—É—Ç–∫–∞ —É–ø–∞–ª–∞ –ª–∏—Ü–æ–º –≤ –≥—Ä—è–∑—å.",
		"–ê–≤—Ç–æ—Ä, —Ç—ã —ç—Ç–æ —Å–µ—Ä—å—ë–∑–Ω–æ?",
		"–ë—Ä–∞—Ç, —Ç–∞–∫ –Ω–µ —à—É—Ç—è—Ç.",
		"–î–Ω–æ –ø—Ä–æ–±–∏—Ç–æ.",
	},
	2: {
		"–ù—É... –º–æ–≥–ª–æ –±—ã—Ç—å –∏ —Ö—É–∂–µ.",
		"üôÑ –ù–µ —Ñ–æ–Ω—Ç–∞–Ω, –Ω–æ —Ö–æ—Ç—å –Ω–µ –∫—Ä–∏–Ω–∂.",
		"–®—É—Ç–∫–∞ –Ω–∞ —Ç—Ä–æ–µ—á–∫—É‚Ä¶ –∞ –Ω–µ—Ç, –Ω–∞ –¥–≤–æ–µ—á–∫—É.",
		"–°–ª–µ–≥–∫–∞ —É–ª—ã–±–Ω—É–ª—Å—è, –Ω–æ —Ç–∞–∫, –∏–∑ –≤–µ–∂–ª–∏–≤–æ—Å—Ç–∏.",
		"–ù—É –¥–∞‚Ä¶ –Ω—É –¥–∞‚Ä¶",
		"–ü–æ—á—Ç–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å, —Å—Ç–∞—Ä–∞–π—Å—è.",
		"–ë—Ä–æ, —Ç—ã –º–æ–∂–µ—à—å –ª—É—á—à–µ!",
		"–ù–∞ –≥—Ä–∞–Ω–∏ —Ñ–æ–ª–∞, –Ω–æ –µ—â—ë –¥–µ—Ä–∂–∏—Ç—Å—è.",
		"–ù–µ —Å–∞–º—ã–π —Ö—É–¥—à–∏–π –ø–∞–Ω—á, –Ω–æ –¥–∞–ª–µ–∫–æ –Ω–µ –ª—É—á—à–∏–π.",
		"–ë—ã–ª–æ –±—ã –∫—Ä—É—Ç–æ, –Ω–æ –Ω–µ –∑–∞—à–ª–æ.",
	},
	3: {
		"–°—Ä–µ–¥–Ω–µ–Ω—å–∫–æ, –Ω–æ –Ω–æ—Ä–º.",
		"üëå –ù–æ—Ä–º–∞–ª—å–Ω–æ, –Ω–æ –±–µ–∑ –æ–≥–æ–Ω—å–∫–∞.",
		"–ù—É, –±—ã–≤–∞–ª–æ –∏ –ª—É—á—à–µ.",
		"–≠—Ç–æ, –∫–æ–Ω–µ—á–Ω–æ, –Ω–µ –≥–µ–Ω–∏–∞–ª—å–Ω–æ, –Ω–æ —Ç–µ—Ä–ø–∏–º–æ.",
		"–®—É—Ç–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ —Å—Ä–µ–¥–Ω—è—è.",
		"–ß—Ç–æ-—Ç–æ –≤ —ç—Ç–æ–º –µ—Å—Ç—å.",
		"–ß—É—Ç—å –±–æ–ª—å—à–µ —Ö–∞—Ä–∏–∑–º—ã ‚Äî –∏ –±—É–¥–µ—Ç —Ç–æ–ø.",
		"–ù–µ –ø–ª–æ—Ö–æ, –Ω–æ –∏ –Ω–µ —Ö–æ—Ä–æ—à–æ.",
		"–ß–∏—Å—Ç—ã–π –Ω–µ–π—Ç—Ä–∞–ª, –Ω–µ –æ–±–∏–¥–µ–ª, –Ω–æ –∏ –Ω–µ —É–¥–∏–≤–∏–ª.",
		"–ï—Å–ª–∏ –±—ã —à—É—Ç–∫–∏ –±—ã–ª–∏ –ø–µ–ª—å–º–µ–Ω—è–º–∏, —ç—Ç–æ –±—ã–ª –±—ã –û–ö –ø–µ–ª—å–º–µ–Ω—å.",
	},
	4: {
		"üî• –•–æ—Ä–æ—à! –ß—É–≤—Å—Ç–≤—É–µ—Ç—Å—è –≤–∞–π–±.",
		"–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —Ç–≤–æ–π —Å—Ç–∏–ª—å!",
		"–≠—Ç–æ –ø–æ—á—Ç–∏ —Ç–æ–ø, –Ω–æ —á—É—Ç–∫–∞ –Ω–µ –¥–æ—Ç—è–Ω—É–ª.",
		"–£–∂–µ –±–ª–∏–∑–∫–æ –∫ —Ö–∞–π–ø—É!",
		"–ö—Ä–µ–ø–∫–∏–π –ø–∞–Ω—á, –¥–µ—Ä–∂–∏ –ø—è—Ç—é–Ω—é ‚úã",
		"–ö—Ä—É—Ç–æ, –Ω–æ –º–æ–∂–Ω–æ –±—ã–ª–æ –µ—â—ë —á—É—Ç—å –∂–∏—Ä–Ω–µ–µ.",
		"–¢—ã –Ω–∞ –≤–µ—Ä–Ω–æ–º –ø—É—Ç–∏!",
		"–®—É—Ç–∫–∞ —Å –ø—Ä–µ—Ç–µ–Ω–∑–∏–µ–π –Ω–∞ –∫–ª–∞—Å—Å–∏–∫—É.",
		"–≠—Ç–æ —É–∂–µ —É—Ä–æ–≤–µ–Ω—å, —Ä–µ—Å–ø–µ–∫—Ç!",
		"–î–æ—Å—Ç–æ–π–Ω–æ, –Ω–æ –º–æ–∂–Ω–æ –µ—â—ë —Å–∏–ª—å–Ω–µ–µ!",
	},
	5: {
		"üíÄ –Ø –£–ú–ï–†!",
		"üòÇ –≠—Ç–æ –ª—É—á—à–µ–µ, —á—Ç–æ —è —Å–ª—ã—à–∞–ª!",
		"–ö–¢–û-–¢–û –í–´–ó–´–í–ê–õ –£–ë–ò–ô–¶–£ –°–ú–ï–•–ê?",
		"üî• –≠—Ç–æ —Ä–∞–∑—ä—ë–±! –í —Ç–æ–ø —Å—Ä–æ—á–Ω–æ!",
		"–¢—ã ‚Äî –≥–µ–Ω–∏–π —é–º–æ—Ä–∞.",
		"–≠—Ç–æ —à–µ–¥–µ–≤—Ä, –∑–∞–ª–µ—Ç–∞–π –≤ —Ç–æ–ø!",
		"–Ø –æ—Ä–Ω—É–ª —Ç–∞–∫, —á—Ç–æ —Å–æ—Å–µ–¥–∏ –≤—ã–∑–≤–∞–ª–∏ –ø–æ–ª–∏—Ü–∏—é.",
		"–î–∞–π—Ç–µ —ç—Ç–æ–º—É —á–µ–ª–æ–≤–µ–∫—É –º–∏–∫—Ä–æ—Ñ–æ–Ω, —Å—Ä–æ—á–Ω–æ!",
		"üíØ –î–æ—Å—Ç–æ–π–Ω–æ —Å—Ç–∞—Ç—É—Å–∞ –ª–µ–≥–µ–Ω–¥—ã!",
		"–≠—Ç–æ –ø–∞–Ω—á–ª–∞–π–Ω, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–π–¥—ë—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é!",
	},
}
