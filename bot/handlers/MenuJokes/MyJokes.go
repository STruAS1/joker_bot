package MenuJokes

import (
	"SHUTKANULbot/Utilities"
	"SHUTKANULbot/bot/context"
	"SHUTKANULbot/db"
	"SHUTKANULbot/db/models"
	"fmt"
	"math/rand"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type JokesPages struct {
	CurrentPage uint
	CountOFpage uint
	Pages       [][]Joke
}

type Joke struct {
	ID                 uint
	ShortName          string
	Text               string
	CountOfEvaluations uint
	AVGScore           uint
}

func HandleMyJokes(botCtx *context.BotContext) {
	state := context.GetUserState(botCtx)
	context.UpdateUserLevel(botCtx, 3)

	_JokesPages, exist := state.Data["JokesPages"].(JokesPages)
	if !exist {
		var user models.User
		db.DB.Where(&models.User{TelegramID: botCtx.UserID}).First(&user)

		var jokes []models.Jokes
		db.DB.Where(&models.Jokes{UserID: user.ID}).Order("id DESC").Limit(50).Find(&jokes)
		if len(jokes) == 0 {
			return
		}

		_JokesPages.Pages = make([][]Joke, 0, 10)

		for i, joke := range jokes {
			ShortName := []rune(Utilities.RemoveHTMLTags(joke.Text))
			if len(ShortName) > 20 {
				ShortName = ShortName[:20]
			}
			j := Joke{
				ID:                 joke.ID,
				ShortName:          string(ShortName),
				Text:               joke.Text,
				CountOfEvaluations: joke.Evaluations,
				AVGScore:           joke.AVGScore,
			}

			pageIndex := i / 5
			if pageIndex >= len(_JokesPages.Pages) {
				_JokesPages.Pages = append(_JokesPages.Pages, make([]Joke, 0, 5))
			}

			_JokesPages.Pages[pageIndex] = append(_JokesPages.Pages[pageIndex], j)
		}

		_JokesPages.CountOFpage = uint(len(_JokesPages.Pages))

	}
	if botCtx.CallbackQuery.Data == "page_next" && _JokesPages.CurrentPage+1 < _JokesPages.CountOFpage {
		_JokesPages.CurrentPage++
	}
	if botCtx.CallbackQuery.Data == "page_Prev" && _JokesPages.CurrentPage > 0 {
		_JokesPages.CurrentPage--
	}
	var rows [][]tgbotapi.InlineKeyboardButton
	for i, Joke := range _JokesPages.Pages[_JokesPages.CurrentPage] {
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData(Joke.ShortName, fmt.Sprintf("Joke_%d_%d", _JokesPages.CurrentPage, i))))
	}
	var showPrev, showNext bool
	if _JokesPages.CountOFpage > 0 {
		showPrev = _JokesPages.CurrentPage > 0
		showNext = _JokesPages.CurrentPage+1 < _JokesPages.CountOFpage
	}
	var row []tgbotapi.InlineKeyboardButton
	if showPrev {
		row = append(row, tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è", "page_Prev"))
	}
	if showNext {
		row = append(row, tgbotapi.NewInlineKeyboardButtonData("‚ñ∂Ô∏è", "page_next"))
	}
	if len(row) != 0 {
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(row...))
	}
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("üöÄ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back")))
	randomIndex := rand.Intn(len(jokeMenuTitles))
	msg := tgbotapi.NewEditMessageTextAndMarkup(
		botCtx.UserID,
		state.MessageID,
		jokeMenuTitles[randomIndex],
		tgbotapi.NewInlineKeyboardMarkup(rows...),
	)
	msg.ParseMode = "HTML"
	state.Data["JokesPages"] = _JokesPages
	if _, err := botCtx.Ctx.BotAPI.Send(msg); err != nil {
		fmt.Println(err)
	}
}

func HandleMyJokeViewer(botCtx *context.BotContext, page uint8, Index uint8) {
	state := context.GetUserState(botCtx)
	context.UpdateUserLevel(botCtx, 4)
	_JokesPages, exist := state.Data["JokesPages"].(JokesPages)
	if !exist {
		HandleMyJokes(botCtx)
	}
	joke := _JokesPages.Pages[page][Index]
	text := fmt.Sprintf("üÉè <b>–®—É—Ç–∫–∞ #%d:</b>\n%s \n\n\n‚ú¶‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ú¶ \n<b>üëÄ–ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤:</b>  <code>%s</code>\n<b>‚≠êÔ∏è–û—Ü–µ–Ω–∫–∞:</b> <code>%s</code>\n‚ú¶‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ú¶", joke.ID, joke.Text, Utilities.ConvertToFancyString(int(joke.CountOfEvaluations)), Utilities.ConvertToFancyStringFloat(fmt.Sprintf("%f", float64(joke.AVGScore)/20)))
	var rows [][]tgbotapi.InlineKeyboardButton
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("üìã –û–±—Ä–∞—Ç–Ω–æ –∫ —Å–ø–∏—Å–∫—É", "back")))
	text += fmt.Sprintf("\n\n<i><b>–ü–æ–¥–µ–ª–∏—Å—å —Å –∫–æ—Ä–µ—à–æ–º:</b> \n<code>https://t.me/JOKER8BOT?start=joke_%d</code></i>", joke.ID)
	msg := tgbotapi.NewEditMessageTextAndMarkup(
		botCtx.UserID,
		state.MessageID,
		text,
		tgbotapi.NewInlineKeyboardMarkup(rows...),
	)
	msg.ParseMode = "HTML"
	botCtx.Ctx.BotAPI.Send(msg)
}

var jokeMenuTitles = [29]string{
	"<b>üòÇ –Æ–º–æ—Ä, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –±–∞—Ç—è —Å–∫–∞–∑–∞–ª <i>‚Äò–Ω–µ –ø–ª–æ—Ö–æ‚Äô</i> –∏ üèÉüí® <span class=\"tg-spoiler\">—Å—ä–µ–±–∞–ª—Å—è</span> –∑–∞ —Ö–ª–µ–±–æ–º</b>",
	"<b><u>üìú –ö–∞—Ç–∞–ª–æ–≥ —é–º–æ—Ä–∞</u></b>. <i>–ë–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏ –æ–±–º–µ–Ω–∞.</i>",
	"<b>ü•ä –®—É—Ç–∫–∏, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–Ω–æ –æ–≥—Ä–µ—Å—Ç–∏ <span class=\"tg-spoiler\">–ø–∏–∑–¥—ã</span>, –Ω–æ –æ–Ω–æ —Ç–æ–≥–æ —Å—Ç–æ–∏—Ç</b>",
	"<b>üèÜ –ó–∞ —ç—Ç–æ—Ç —é–º–æ—Ä –º–µ–Ω—è –ª–∏–±–æ <i>–ø–æ—Å–∞–¥—è—Ç</i>, –ª–∏–±–æ <u>—Å–¥–µ–ª–∞—é—Ç –ª–µ–≥–µ–Ω–¥–æ–π</u></b>",
	"<b>üíÄ –û—Ö—É–µ—Ç—å, —Ç—ã –ø—Ä–∞–≤–¥–∞ —Å—é–¥–∞ –∑–∞—à—ë–ª? <i>–ù—É —Ç–µ–ø–µ—Ä—å –¥–µ—Ä–∂–∏—Å—å.</i></b>",
	"<b>üê± –°–±–æ—Ä–Ω–∏–∫ —à—É—Ç–æ–∫, –æ—Ç –∫–æ—Ç–æ—Ä—ã—Ö –¥–∞–∂–µ –º–æ–π –∫–æ—Ç <u>—Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ –º–µ–Ω—è —Å –æ—Å—É–∂–¥–µ–Ω–∏–µ–º</u></b>",
	"<b>üßä –¢—É—Ç –¥–∞–∂–µ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ <span class=\"tg-spoiler\">–æ—Ö—É–µ–ª</span>, <i>–∞ –æ–Ω –≤–∏–¥–µ–ª, –∫–∞–∫ —è –∂—Ä—É –≤ 3 –Ω–æ—á–∏</i></b>",
	"<b>ü§° –ü–æ—Å–ª–µ —ç—Ç–∏—Ö —à—É—Ç–æ–∫ <i>–ª–∏–±–æ —Å–º–µ—ë—à—å—Å—è</i>, –ª–∏–±–æ <u><span class=\"tg-spoiler\">—É—Ö–æ–¥–∏—à—å –Ω–∞—Ö—É–π</span></u></b>",
	"<b>ü©∏ –ö–æ–ª–ª–µ–∫—Ü–∏—è –º–µ–º–æ–≤, <i>–∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –≤—ã—Ö–≤–∞—Ç–∏—Ç—å <span class=\"tg-spoiler\">–≤ –µ–±–∞–ª–æ</span></i></b>",
	"<b>üîÄ –ó–¥–µ—Å—å —É—Ä–æ–≤–µ–Ω—å –∫–æ–º–µ–¥–∏–∏ –æ—Ç <u>‚Äò–≥–µ–Ω–∏–∞–ª—å–Ω–æ‚Äô</u> –¥–æ <span class=\"tg-spoiler\">‚Äò–Ω—É —Ç—ã –∏ —Ö—É–µ—Å–æ—Å‚Äô</span></b>",
	"<b>üìù –®—É—Ç–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –±—ã –æ—Å—Ç–∞—Ç—å—Å—è –≤ <i>—á–µ—Ä–Ω–æ–≤–∏–∫–∞—Ö</i>, –Ω–æ –º–Ω–µ <span class=\"tg-spoiler\">–ø–æ—Ö—É–π</span></b>",
	"<b>ü•É –Æ–º–æ—Ä —Å –ª—ë–≥–∫–∏–º –ø—Ä–∏–≤–∫—É—Å–æ–º <i><span class=\"tg-spoiler\">‚Äò–±–ª—è–¥—å, –Ω–∞—Ö—É—è —è —ç—Ç–æ —á–∏—Ç–∞—é?‚Äô</span></i></b>",
	"<b>üç∫ –ö–æ–º–µ–¥–∏–π–Ω—ã–π –∞—Ä—Ö–∏–≤, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã —Ç–æ—á–Ω–æ <u>–∑–∞—Ö–æ—á–µ—à—å <span class=\"tg-spoiler\">–Ω–∞–∂—Ä–∞—Ç—å—Å—è</span></u></b>",
	"<b>‚ö†Ô∏è –ï—Å–ª–∏ –Ω–µ —Å–º–µ—ë—à—å—Å—è ‚Äî <i>—É —Ç–µ–±—è –ª–∏–±–æ –Ω–µ—Ç –¥—É—à–∏, –ª–∏–±–æ —Ç—ã –ø—Ä–æ—Å—Ç–æ <span class=\"tg-spoiler\">–¥–æ–ª–±–æ—ë–±</span></i></b>",
	"<b>üìâ –®—É—Ç–∫–∏, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –º–µ–Ω—è –ª–∏–±–æ —É–≤–æ–ª—è—Ç, –ª–∏–±–æ <i>–ø–æ–≤—ã—Å—è—Ç</i></b>",
	"<b>üõí –Æ–º–æ—Ä, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –¥–∞–∂–µ –∫–∞—Å—Å–∏—Ä—à–∞ –≤ –ü—è—Ç—ë—Ä–æ—á–∫–µ <u><span class=\"tg-spoiler\">–æ—Ö—É–µ–µ—Ç</span></u></b>",
	"<b>üè• –ï—Å–ª–∏ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Ç–µ–±—è –Ω–µ –∑–∞–±–µ—Ä—É—Ç —Å–∞–Ω–∏—Ç–∞—Ä—ã ‚Äî <i>—Ç—ã, —Å—É–∫–∞, <span class=\"tg-spoiler\">–ª–µ–≥–µ–Ω–¥–∞</span></i></b>",
	"<b>üëä –®—É—Ç–∫–∏ —É—Ä–æ–≤–Ω—è <span class=\"tg-spoiler\">‚Äò–µ–±–∞–ª–æ —Å–ª–æ–º–∞–π, –Ω–æ –Ω–µ —Å–º–µ–π—Å—è‚Äô</span></b>",
	"<b>üìñ –ö–∞—Ç–∞–ª–æ–≥ —Ñ—Ä–∞–∑, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –º–Ω–µ <i>–º–æ–≥—É—Ç –ø—Ä–æ–ø–∏—Å–∞—Ç—å <span class=\"tg-spoiler\">–ª–µ—â–∞</span></i></b>",
	"<b>üé≠ –ï—Å–ª–∏ —Ç—ã —á–∏—Ç–∞–µ—à—å —ç—Ç–æ –¥–µ—Ä—å–º–æ, —Ç–æ <span class=\"tg-spoiler\">–ª–∏–±–æ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–∫—É—Å, –ª–∏–±–æ —Ç—ã –∫–æ–Ω—á–µ–Ω—ã–π</span></b>",
	"<b>üéØ –°–º–µ—à–Ω–æ? <i><span class=\"tg-spoiler\">–•—É–π –∑–Ω–∞–µ—Ç</span></i>, –Ω–æ —á–∏—Ç–∞—Ç—å –±—É–¥–µ—à—å.</b>",
	"<b>üé§ –ü–æ—Å–ª–µ —ç—Ç–∏—Ö —à—É—Ç–æ–∫ —Ç—ã –ª–∏–±–æ <i>–∫–æ–º–∏–∫</i>, –ª–∏–±–æ <u><span class=\"tg-spoiler\">—Ö—É–µ—Å–æ—Å</span></u></b>",
	"<b>üíº –®—É—Ç–∫–∏, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–Ω–æ <span class=\"tg-spoiler\">–±—Ä–æ—Å–∏—Ç—å —Ä–∞–±–æ—Ç—É</span> –∏ –≤–æ–æ–±—â–µ –Ω–µ –∂–∞–ª–µ—Ç—å</b>",
	"<b>üíª –°–±–æ—Ä–Ω–∏–∫ —é–º–æ—Ä–∞, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –¥–∞–∂–µ <i>–∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Ç—Ä–æ–ª–ª–∏</i> <span class=\"tg-spoiler\">–æ—Ö—É–µ–≤–∞—é—Ç</span></b>",
	"<b>üí• –Æ–º–æ—Ä, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç–µ–±—è <span class=\"tg-spoiler\">–ª–∏–±–æ –∑–∞—É–≤–∞–∂–∞—é—Ç</span>, –ª–∏–±–æ <u><span class=\"tg-spoiler\">–æ—Ç–ø–∏–∑–¥—è—Ç</span></u></b>",
	"<b>ü§ñ –ó–¥–µ—Å—å –¥–∞–∂–µ –Ω–µ–π—Ä–æ—Å–µ—Ç—å –∑–∞–≤–∏—Å–∞–µ—Ç, <i>–ø—ã—Ç–∞—è—Å—å –ø–æ–Ω—è—Ç—å, —á—Ç–æ —ç—Ç–æ –∑–∞ <span class=\"tg-spoiler\">—Ö—É–π–Ω—è</span></i></b>",
	"<b>üö™ –®—É—Ç–∫–∏, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –±–∞—Ç—è <u>–≤–µ—Ä–Ω—É–ª—Å—è</u>, –Ω–æ –ø–æ—Ç–æ–º —Å–Ω–æ–≤–∞ <i><span class=\"tg-spoiler\">—Å—ä–µ–±–∞–ª—Å—è</span></i></b>",
	"<b>üîÆ –ï—Å–ª–∏ —Ç—ã —ç—Ç–æ —á–∏—Ç–∞–µ—à—å, –∑–Ω–∞—á–∏—Ç —É —Ç–µ–±—è <i>–ª–∏–±–æ –∂–µ–ª–µ–∑–Ω—ã–µ –Ω–µ—Ä–≤—ã, –ª–∏–±–æ <span class=\"tg-spoiler\">–Ω–µ—Ö—É–π –¥–µ–ª–∞—Ç—å</span></i></b>",
	"<b>üé¢ –ú–µ—Å—Ç–æ, –≥–¥–µ <u>—Ä–∂—É—Ç</u> –¥–∞–∂–µ —Ç–µ, –∫—Ç–æ –ø–æ –∂–∏–∑–Ω–∏ <i><span class=\"tg-spoiler\">–≤–µ—á–Ω–æ –∑–∞–µ–±–∞–ª—Å—è</span></i></b>",
}
